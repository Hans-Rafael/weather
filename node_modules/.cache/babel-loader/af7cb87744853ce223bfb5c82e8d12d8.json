{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Claro drive\\\\Henrry\\\\all M2-M4\\\\WheatherApp\\\\homework\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [cities, setCities] = useState([]); //useState sera el estado inicial que al principo es un array vacio de objetos\n\n  function onSearch(ciudad) {\n    //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n    const apiKey = '6a082e2ce09eb512e14f9ee388bad26c';\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main === undefined) {\n        alert(\"Ciudad no encontrada\");\n      } else {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        setCities(oldCities => [...oldCities, ciudad]);\n      }\n    });\n  } //**************** */\n\n\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n  }\n  /* var arr = [1,2,3,4,1,2,3,1,2,3]\n  var uniqueArr = [...new Set(arr)]\n  console.log(uniqueArr) //[1,2,3,4] */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"T\\xEDtulo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Nav, {\n      onSearch: onSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Cards, {\n      cities: cities,\n      onClose: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Dell/Claro drive/Henrry/all M2-M4/WheatherApp/homework/src/App.js"],"names":["React","useState","Nav","Cards","App","cities","setCities","onSearch","ciudad","apiKey","fetch","then","r","json","recurso","main","undefined","alert","min","Math","round","temp_min","max","temp_max","img","weather","icon","id","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","oldCities","onClose","filter","c"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,GAAP,MAAgB,sBAAhB;AACA,OAAOC,KAAP,MAAkB,wBAAlB;;AAGA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC,CAD4B,CACa;;AACzC,WAASM,QAAT,CAAkBC,MAAlB,EAA0B;AACxB;AAEA,UAAMC,MAAM,GAAG,kCAAf;AAEAC,IAAAA,KAAK,CAAE,oDAAmDF,MAAO,UAASC,MAAO,eAA5E,CAAL,CACGE,IADH,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,EADb,EAEGF,IAFH,CAESG,OAAD,IAAa;AACjB,UAAIA,OAAO,CAACC,IAAR,KAAiBC,SAArB,EAAgC;AAC9BC,QAAAA,KAAK,CAAC,sBAAD,CAAL;AACD,OAFD,MAGK;AACH,cAAMT,MAAM,GAAG;AACbU,UAAAA,GAAG,EAAEC,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACC,IAAR,CAAaM,QAAxB,CADQ;AAEbC,UAAAA,GAAG,EAAEH,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACC,IAAR,CAAaQ,QAAxB,CAFQ;AAGbC,UAAAA,GAAG,EAAEV,OAAO,CAACW,OAAR,CAAgB,CAAhB,EAAmBC,IAHX;AAIbC,UAAAA,EAAE,EAAEb,OAAO,CAACa,EAJC;AAKbC,UAAAA,IAAI,EAAEd,OAAO,CAACc,IAAR,CAAaC,KALN;AAMbC,UAAAA,IAAI,EAAEhB,OAAO,CAACC,IAAR,CAAae,IANN;AAObC,UAAAA,IAAI,EAAEjB,OAAO,CAACiB,IAPD;AAQbN,UAAAA,OAAO,EAAEX,OAAO,CAACW,OAAR,CAAgB,CAAhB,EAAmBV,IARf;AASbiB,UAAAA,MAAM,EAAElB,OAAO,CAACkB,MAAR,CAAeC,GATV;AAUbC,UAAAA,OAAO,EAAEpB,OAAO,CAACqB,KAAR,CAAcC,GAVV;AAWbC,UAAAA,QAAQ,EAAEvB,OAAO,CAACqB,KAAR,CAAcG;AAXX,SAAf;AAaAhC,QAAAA,SAAS,CAACiC,SAAS,IAAI,CAAC,GAAGA,SAAJ,EAAe/B,MAAf,CAAd,CAAT;AACD;AACF,KAtBH;AAuBD,GA9B2B,CA+B9B;;;AACE,WAASgC,OAAT,CAAiBb,EAAjB,EAAqB;AACnBrB,IAAAA,SAAS,CAACiC,SAAS,IAAIA,SAAS,CAACE,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACf,EAAF,KAASA,EAA/B,CAAd,CAAT;AAED;AACD;AACF;AACA;;;AAKE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGI,QAAC,GAAD;AAAK,MAAA,QAAQ,EAAEpB;AAAf;AAAA;AAAA;AAAA;AAAA,YAHJ,eAOI,QAAC,KAAD;AAAO,MAAA,MAAM,EAAEF,MAAf;AAAuB,MAAA,OAAO,EAAEmC;AAAhC;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD;;GAvDuBpC,G;;KAAAA,G","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Nav from './components/Nav.jsx';\nimport Cards from './components/Cards.jsx';\n\n\nexport default function App() {\n  const [cities, setCities] = useState([]);//useState sera el estado inicial que al principo es un array vacio de objetos\n  function onSearch(ciudad) {\n    //Acá habría que hacer el llamado a la API para obtener los datos de la ciudad\n    \n    const apiKey = '6a082e2ce09eb512e14f9ee388bad26c'\n\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if (recurso.main === undefined) {\n          alert(\"Ciudad no encontrada\");\n        }\n        else {\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          };\n          setCities(oldCities => [...oldCities, ciudad]);\n        }\n      });\n  }\n//**************** */\n  function onClose(id) {\n    setCities(oldCities => oldCities.filter(c => c.id !== id));\n   \n  }\n  /* var arr = [1,2,3,4,1,2,3,1,2,3]\n\nvar uniqueArr = [...new Set(arr)]\n\nconsole.log(uniqueArr) //[1,2,3,4] */\n\n\n  return (\n    <div className=\"App\">\n      <h1>Título</h1>\n      {/*  //Renderizar componentes */}   \n        <Nav onSearch={onSearch} />\n\n        {/* <Cards cities={cities} onClose={onClose} /> */}\n        \n        <Cards cities={cities} onClose={onClose} />\n\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}